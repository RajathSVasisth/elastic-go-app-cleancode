// Code generated by mockery v2.30.1. DO NOT EDIT.

package domain

import (
	context "context"

	elastic_go_app_cleancodedomain "github.com/RajathSVasisth/elastic-go-app-cleancode/domain"
	mock "github.com/stretchr/testify/mock"
)

// TaskRepository is an autogenerated mock type for the TaskRepository type
type TaskRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: c, task
func (_m *TaskRepository) Create(c context.Context, task *elastic_go_app_cleancodedomain.Task) error {
	ret := _m.Called(c, task)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *elastic_go_app_cleancodedomain.Task) error); ok {
		r0 = rf(c, task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: c, id
func (_m *TaskRepository) Delete(c context.Context, id *string) error {
	ret := _m.Called(c, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *string) error); ok {
		r0 = rf(c, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchByUserID provides a mock function with given fields: c, userID, pagination
func (_m *TaskRepository) FetchByUserID(c context.Context, userID string, pagination elastic_go_app_cleancodedomain.Pagination) ([]elastic_go_app_cleancodedomain.Task, error) {
	ret := _m.Called(c, userID, pagination)

	var r0 []elastic_go_app_cleancodedomain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, elastic_go_app_cleancodedomain.Pagination) ([]elastic_go_app_cleancodedomain.Task, error)); ok {
		return rf(c, userID, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, elastic_go_app_cleancodedomain.Pagination) []elastic_go_app_cleancodedomain.Task); ok {
		r0 = rf(c, userID, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]elastic_go_app_cleancodedomain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, elastic_go_app_cleancodedomain.Pagination) error); ok {
		r1 = rf(c, userID, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: c, task
func (_m *TaskRepository) Update(c context.Context, task *elastic_go_app_cleancodedomain.Task) error {
	ret := _m.Called(c, task)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *elastic_go_app_cleancodedomain.Task) error); ok {
		r0 = rf(c, task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTaskRepository creates a new instance of TaskRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskRepository {
	mock := &TaskRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
