// Code generated by mockery v2.28.2. DO NOT EDIT.

package mocks

import (
	bytes "bytes"
	context "context"

	io "io"

	mock "github.com/stretchr/testify/mock"
)

// ElasticDBMethod is an autogenerated mock type for the ElasticDBMethod type
type ElasticDBMethod struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id, indexname
func (_m *ElasticDBMethod) Delete(ctx context.Context, id string, indexname string) error {
	ret := _m.Called(ctx, id, indexname)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, id, indexname)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Index provides a mock function with given fields: ctx, buf, indexname, id
func (_m *ElasticDBMethod) Index(ctx context.Context, buf bytes.Buffer, indexname string, id string) error {
	ret := _m.Called(ctx, buf, indexname, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, bytes.Buffer, string, string) error); ok {
		r0 = rf(ctx, buf, indexname, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Search provides a mock function with given fields: ctx, buf, indexname, from, size
func (_m *ElasticDBMethod) Search(ctx context.Context, buf bytes.Buffer, indexname string, from *int, size *int) (io.ReadCloser, error) {
	ret := _m.Called(ctx, buf, indexname, from, size)

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, bytes.Buffer, string, *int, *int) (io.ReadCloser, error)); ok {
		return rf(ctx, buf, indexname, from, size)
	}
	if rf, ok := ret.Get(0).(func(context.Context, bytes.Buffer, string, *int, *int) io.ReadCloser); ok {
		r0 = rf(ctx, buf, indexname, from, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, bytes.Buffer, string, *int, *int) error); ok {
		r1 = rf(ctx, buf, indexname, from, size)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewElasticDBMethod interface {
	mock.TestingT
	Cleanup(func())
}

// NewElasticDBMethod creates a new instance of ElasticDBMethod. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewElasticDBMethod(t mockConstructorTestingTNewElasticDBMethod) *ElasticDBMethod {
	mock := &ElasticDBMethod{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
